<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beginners on rubensanchez.dev</title>
    <link>/tags/beginners/</link>
    <description>Recent content in beginners on rubensanchez.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Sep 2020 12:22:49 +0000</lastBuildDate><atom:link href="/tags/beginners/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I was doing bad stuff in my first dev job. Sorry! (Part II)</title>
      <link>/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-ii-iak/</link>
      <pubDate>Thu, 24 Sep 2020 12:22:49 +0000</pubDate>
      
      <guid>/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-ii-iak/</guid>
      <description>Glad to see you back. It means that you liked the previous part of this article. Or if you haven&amp;rsquo;t seen it yet, please check it out.
I would like to continue the series by explaining about some more dubious techniques I was using during my first dev job. I hope you can find some advice and good tips from reading it!
Bad dependencies So in that first job, we were very keen on researching new cool tools.</description>
    </item>
    
    <item>
      <title>I was doing bad stuff in my first dev job. Sorry! (Part I)</title>
      <link>/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-i-58k0/</link>
      <pubDate>Thu, 24 Sep 2020 11:30:17 +0000</pubDate>
      
      <guid>/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-i-58k0/</guid>
      <description>I got my first developer job almost by accident. I was not looking for a dev job back then, but while I was working doing something else, some tools I had developed as work side project got some traction and I was able to get an offer from the same company to move into a position to develop full time.
That was pretty cool! But looking back, I did things that would send shivers down the spines of security professionals, devops guys and other kinds of reasonable people.</description>
    </item>
    
    <item>
      <title>Learn to properly test and auto deploy your Go app with a movie posters server project</title>
      <link>/blog/learn-tdd-basics-and-automated-deployments-with-go-github-actions-and-heroku-2hf3/</link>
      <pubDate>Fri, 15 May 2020 14:57:59 +0000</pubDate>
      
      <guid>/blog/learn-tdd-basics-and-automated-deployments-with-go-github-actions-and-heroku-2hf3/</guid>
      <description>Creating a well tested application pays off by having a lot less to debug in the future, together with the peace of mind that you can refactor your application as much as you want and nothing is going to break because the tests would alert you quickly if that happened. Automating your deployment will also pay off, not only because it will save you a ton of clicks (or commands) but because it will prevent errors and your builds will be predictable.</description>
    </item>
    
    <item>
      <title>Should you learn Functional Programming?</title>
      <link>/blog/should-you-learn-functional-programming-3flp/</link>
      <pubDate>Fri, 10 Apr 2020 22:06:45 +0000</pubDate>
      
      <guid>/blog/should-you-learn-functional-programming-3flp/</guid>
      <description>Have you started learning to program recently and heard that all the cool people are doing functional programming? Unsure about whether giving it a go or not? I used my mad design skills to put together a handy chart.
Let me add some extra glossary that might help you in your quest:
Programming paradigm: This means how we classify programming languages according to their features. If you started learning recently, it&amp;rsquo;s very likely that you are using a multiparadigm language such as Javascript or Python.</description>
    </item>
    
  </channel>
</rss>
