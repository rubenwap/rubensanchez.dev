<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on rubensanchez.dev</title>
    <link>https://www.rubensanchez.dev/blog/</link>
    <description>Recent content in Blogs on rubensanchez.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Apr 2021 09:14:10 +0000</lastBuildDate><atom:link href="https://www.rubensanchez.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Must-Bookmarks to become good in Go</title>
      <link>https://www.rubensanchez.dev/blog/must-bookmarks-to-become-good-in-go-ln8/</link>
      <pubDate>Thu, 01 Apr 2021 09:14:10 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/must-bookmarks-to-become-good-in-go-ln8/</guid>
      <description>I am having some days off, so I have compiled a list of Golang resources to go through during this time, aimed to become a better Go developer. I am hoping that this can also be helpful to you. By the time we all reach the end of the list, our level of language familiarity should have increased a lot!
Fundamentals  How to write Go code  Quick initial refresher in case you need it!</description>
    </item>
    
    <item>
      <title>Go RabbitMQ to Kafka ETL with zero lines of Go!</title>
      <link>https://www.rubensanchez.dev/blog/go-rabbitmq-to-kafka-etl-with-zero-lines-of-go-1b83/</link>
      <pubDate>Sat, 16 Jan 2021 19:00:12 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/go-rabbitmq-to-kafka-etl-with-zero-lines-of-go-1b83/</guid>
      <description>I think that for a big percentage of cases, ETL pipelines are a solved problem. Unless you have very special needs, there are many tools in the market that can remove the hassle of setting up irrelevant minutia, and let you focus on the business logic instead, because anyone can create a function that connects to a Rabbit MQ exchange, but only you can work on the task of how your business logic should handle the received messages.</description>
    </item>
    
    <item>
      <title>Create a *useful* Alexa skill with minimal Python knowledge</title>
      <link>https://www.rubensanchez.dev/blog/create-a-useful-alexa-skill-with-minimal-python-knowledge-man/</link>
      <pubDate>Tue, 08 Dec 2020 15:18:11 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/create-a-useful-alexa-skill-with-minimal-python-knowledge-man/</guid>
      <description>I am pretty disappointed with the terrible quality of most of the &amp;ldquo;custom&amp;rdquo; stuff found in the Alexa skills shop. Lots of &amp;ldquo;tell me a joke&amp;rdquo;, &amp;ldquo;tell me a fun fact&amp;rdquo;, &amp;ldquo;tell me random facts&amp;rdquo;, &amp;ldquo;play forest sounds&amp;rdquo;, &amp;ldquo;play sea sounds&amp;rdquo;&amp;hellip; So at the end, my Echo unit ended up being used just to turn Netflix on and off and manipulate the heating temperature.
That&amp;rsquo;s no more! It&amp;rsquo;s very easy to create custom skills with Python (or Node.</description>
    </item>
    
    <item>
      <title>Making a fast &#34;yes&#34; clone with Go</title>
      <link>https://www.rubensanchez.dev/blog/making-a-fast-yes-clone-with-go-hom/</link>
      <pubDate>Sun, 18 Oct 2020 12:59:33 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/making-a-fast-yes-clone-with-go-hom/</guid>
      <description>Following the series on creating Go based clones of the GNU coreutils, today I wanted to do a speed experiment using yes
What is YES? If you are using mac or linux, go to your terminal and type yes . You should get an infinite stream of y . Or you can also run it as yes yes and you will get an infinite stream of yes . Or yes no .</description>
    </item>
    
    <item>
      <title>Will this quick Julia lesson make you forget about Python for your data needs? </title>
      <link>https://www.rubensanchez.dev/blog/will-this-quick-julia-lesson-make-you-forget-about-python-for-your-data-needs-4d1c/</link>
      <pubDate>Fri, 02 Oct 2020 17:52:24 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/will-this-quick-julia-lesson-make-you-forget-about-python-for-your-data-needs-4d1c/</guid>
      <description>I have been a Python heavy user for some time, so when I learned about Julia I thought that the prospect it was introducing was very interesting. Simplicity in the syntax but execution power closer to C, but maybe the obstacle to beat was too high. Python already has massive adoption, there is a huge ecosystem with modules for any task you can think about and even people from the R world seem to be migrating to it.</description>
    </item>
    
    <item>
      <title>Upskill yourself by recreating GNU Coreutils in Go</title>
      <link>https://www.rubensanchez.dev/blog/upskill-yourself-by-recreating-gnu-coretools-in-go-9f5/</link>
      <pubDate>Sat, 26 Sep 2020 21:10:52 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/upskill-yourself-by-recreating-gnu-coretools-in-go-9f5/</guid>
      <description>Reinventing the wheel for fun One of the most popular advice to gain skills programming is to reimplement tools that already exist. For instance, if you wanted to learn how to do a CRUD API, I am pretty sure you probably practiced with a &amp;ldquo;To do&amp;rdquo; app. The point of this is not to create something new and groundbreaking, but to use well known ideas to improve what you know. Other examples you might have seen are things such as implementing a chat server to learn about websockets, a weather app, a Hacker News reader&amp;hellip;</description>
    </item>
    
    <item>
      <title>I was doing bad stuff in my first dev job. Sorry! (Part II)</title>
      <link>https://www.rubensanchez.dev/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-ii-iak/</link>
      <pubDate>Thu, 24 Sep 2020 12:22:49 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-ii-iak/</guid>
      <description>Glad to see you back. It means that you liked the previous part of this article. Or if you haven&amp;rsquo;t seen it yet, please check it out.
I would like to continue the series by explaining about some more dubious techniques I was using during my first dev job. I hope you can find some advice and good tips from reading it!
Bad dependencies So in that first job, we were very keen on researching new cool tools.</description>
    </item>
    
    <item>
      <title>I was doing bad stuff in my first dev job. Sorry! (Part I)</title>
      <link>https://www.rubensanchez.dev/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-i-58k0/</link>
      <pubDate>Thu, 24 Sep 2020 11:30:17 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/i-was-doing-bad-stuff-in-my-first-dev-job-sorry-part-i-58k0/</guid>
      <description>I got my first developer job almost by accident. I was not looking for a dev job back then, but while I was working doing something else, some tools I had developed as work side project got some traction and I was able to get an offer from the same company to move into a position to develop full time.
That was pretty cool! But looking back, I did things that would send shivers down the spines of security professionals, devops guys and other kinds of reasonable people.</description>
    </item>
    
    <item>
      <title>Monitor the behavior of your Python app by learning InfluxDB, Grafana and Telegraf</title>
      <link>https://www.rubensanchez.dev/blog/monitor-the-behavior-of-your-python-app-by-learning-influxdb-grafana-and-telegraf-3ehg/</link>
      <pubDate>Sun, 13 Sep 2020 10:53:11 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/monitor-the-behavior-of-your-python-app-by-learning-influxdb-grafana-and-telegraf-3ehg/</guid>
      <description>We will go through a tutorial where Python and Flask will be used. However, you will soon realize that Python and Flask are the less important parts here. Due to the nature of the setup (a docker-compose file) you shouldn&amp;rsquo;t have any trouble swapping the Docker for my Flask app with whatever else you want to monitor.
So, what are we actually doing here? What is the final goal? We will create docker compose file which will instantiate the following services:</description>
    </item>
    
    <item>
      <title>How do you approach your DEV &#34;Reading List&#34;?</title>
      <link>https://www.rubensanchez.dev/blog/how-do-you-approach-your-dev-reading-list-1l28/</link>
      <pubDate>Fri, 22 May 2020 08:49:19 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/how-do-you-approach-your-dev-reading-list-1l28/</guid>
      <description>I have noticed that when faced with articles that are either long, or likely to be useful in the future, people tend to add them to their reading list.
I am curious about how do you use this list. Do you set a time during the week when you go through it and read what you have saved during the last days?
Do you use it as a sort of library, where you can go and search for answers on interesting topics whenever the need comes?</description>
    </item>
    
    <item>
      <title>Use Python in your browser client code together with JS. No server required, thanks to Web Assembly</title>
      <link>https://www.rubensanchez.dev/blog/use-python-in-your-browser-client-code-together-with-js-no-server-required-thanks-to-web-assembly-2be2/</link>
      <pubDate>Thu, 21 May 2020 10:57:53 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/use-python-in-your-browser-client-code-together-with-js-no-server-required-thanks-to-web-assembly-2be2/</guid>
      <description>Use case: Let&amp;rsquo;t say that I love Python Pandas for data manipulation, but at the same time I need to use the manipulation results in a regular client-side webpage. The classic method I would do is to have a Python backend, do my calculations in there and then send the results to the front, via an API, server rendered templates or whatever.
I am going to present you an alternative based on Web Assembly and the Pyodide project.</description>
    </item>
    
    <item>
      <title>The Go way to parse strings into dates is pretty confusing unless you live in a small fraction of the world</title>
      <link>https://www.rubensanchez.dev/blog/the-go-way-to-parse-strings-into-dates-is-pretty-confusing-unless-you-live-in-a-small-fraction-of-the-world-42o9/</link>
      <pubDate>Mon, 18 May 2020 16:22:29 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/the-go-way-to-parse-strings-into-dates-is-pretty-confusing-unless-you-live-in-a-small-fraction-of-the-world-42o9/</guid>
      <description>When it comes to date formats, there is about 640 million people who prefer to order using MDY , and more than 5000 million that are doing other ordering systems:
https://en.wikipedia.org/wiki/Date_format_by_country
This shouldn&amp;rsquo;t need to be an issue, really. Let&amp;rsquo;s take Python as an example and do a string to date operation both for our MDY friends and for the rest of the world too:
from datetime import datetime datetime_mdy = datetime.</description>
    </item>
    
    <item>
      <title>Learn to properly test and auto deploy your Go app with a movie posters server project</title>
      <link>https://www.rubensanchez.dev/blog/learn-tdd-basics-and-automated-deployments-with-go-github-actions-and-heroku-2hf3/</link>
      <pubDate>Fri, 15 May 2020 14:57:59 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/learn-tdd-basics-and-automated-deployments-with-go-github-actions-and-heroku-2hf3/</guid>
      <description>Creating a well tested application pays off by having a lot less to debug in the future, together with the peace of mind that you can refactor your application as much as you want and nothing is going to break because the tests would alert you quickly if that happened. Automating your deployment will also pay off, not only because it will save you a ton of clicks (or commands) but because it will prevent errors and your builds will be predictable.</description>
    </item>
    
    <item>
      <title>Should you learn Functional Programming?</title>
      <link>https://www.rubensanchez.dev/blog/should-you-learn-functional-programming-3flp/</link>
      <pubDate>Fri, 10 Apr 2020 22:06:45 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/should-you-learn-functional-programming-3flp/</guid>
      <description>Have you started learning to program recently and heard that all the cool people are doing functional programming? Unsure about whether giving it a go or not? I used my mad design skills to put together a handy chart.
Let me add some extra glossary that might help you in your quest:
Programming paradigm: This means how we classify programming languages according to their features. If you started learning recently, it&amp;rsquo;s very likely that you are using a multiparadigm language such as Javascript or Python.</description>
    </item>
    
    <item>
      <title>Lua and Löve are your gateway drug to videogame making</title>
      <link>https://www.rubensanchez.dev/blog/lua-and-love-are-your-gateway-drug-to-videogame-making-53ag/</link>
      <pubDate>Mon, 23 Mar 2020 19:09:18 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/lua-and-love-are-your-gateway-drug-to-videogame-making-53ag/</guid>
      <description>So I admit it, I always wanted to create a game, but I have been too easily scared by the amount of work that seemed to be required to delve into something like Unity. I did some easy attempts at HTML canvas based Javascript games, but nothing impressive enough. Although if you are so inclined, do check the great PhysicsJS library and you might end up creating something cool.
Then my quest had a clear goal: Be able to make a cool game with the most minimal amount of effort possible.</description>
    </item>
    
    <item>
      <title>Do you love web scraping with Scrapy? Then check Colly for Go</title>
      <link>https://www.rubensanchez.dev/blog/do-you-love-web-scraping-with-scrapy-then-check-colly-for-go-6kc/</link>
      <pubDate>Thu, 05 Mar 2020 09:39:29 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/do-you-love-web-scraping-with-scrapy-then-check-colly-for-go-6kc/</guid>
      <description>Scrapy is the star of the web scraping world in Python. There are indeed other beautiful libraries out there, but the simplicity and power that Scrapy gives you has captured the hearts of many Python developers who now have this full suite of excellent tools to perform the type of tasks that used to need more tinkering and patching. Scrapy alone will give you the actual scraping running on the Twisted engine, a shell to test your xpaths and css paths, an elegant way to specify your middleware, build a pipeline of actions easily and much more.</description>
    </item>
    
    <item>
      <title>There is such thing as easy API development with Scala</title>
      <link>https://www.rubensanchez.dev/blog/there-is-such-thing-as-easy-api-development-with-scala-2did/</link>
      <pubDate>Sat, 29 Feb 2020 14:59:19 +0000</pubDate>
      
      <guid>https://www.rubensanchez.dev/blog/there-is-such-thing-as-easy-api-development-with-scala-2did/</guid>
      <description>I have to admit I am far from expert in Scala, that&amp;rsquo;s why when recently I had to prototype an API in this language, I shuddered. Frameworks like Akka HTTP or HTTP4S were far too complex for a novice in the field like me, because learning Scala is not about the syntax, but about the mindset. And it&amp;rsquo;s only logical that someone coming from the field of totally different languages such as Python or Javascript, can have a little trouble understanding concepts like the actor model or the functional proper way of using HTTP4S.</description>
    </item>
    
  </channel>
</rss>
